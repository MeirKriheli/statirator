"Site definition"

import os
import re
import sys
import logging
import urllib.request
import urllib.error
import zipfile
import tempfile
from collections import defaultdict, deque
from jinja2 import Template

CONFIG_TEMPLATE = """# Generated by statirator.
from {{ import_path }} import {{ class_name }}
import os

SITE_OPTS = {
    'root': os.path.abspath(os.path.dirname(__file__)),
    'name': '{{name}}',
    'domain': '{{domain}}',  # If a single domain, means that each lanugage
                             # goes into a subfolder, otherwise, specify a dict
                             # with the 'lang': 'domain' for each language
    'source': '{{source}}',  # relative to build or absolute
    'build': '{{ build }}',  # relative to build or absolute
    'languages': {{ languages }},  #  First language is default
    'prefix_default_lang': False,  # should default language be in a sub dir (in
                                   #  case of a single domain)?
}

site = {{ class_name }}(**SITE_OPTS)

"""


class Site(object):
    """Basic Site object, creates the config file and an empty source dir"""

    def __init__(
            self, name='Default', domain='example.com', root='.',
            source='source', build='build',
            languages=None, prefix_default_lang=False,
            ignore_starting_with='_', **kwargs):
        """Defines the basic site object"""

        self.name = name
        self.root = os.path.abspath(root)
        self.source = os.path.abspath(os.path.join(root, source))
        self.domain = domain
        self.build = os.path.abspath(os.path.join(root, build))
        self.ignore_starting_with = ignore_starting_with
        self.languages = languages
        self.options = kwargs

        self.source_templates_dir = os.path.abspath(os.path.join(
            os.path.dirname(__file__), 'templates'))

        self.db = None

    def create(self):
        """Create the initial site"""

        if os.path.exists(self.root):
            logging.error('{0} already exists, aborting'.format(self.root))
            sys.exit(1)

        logging.info('Creating "%s" at %s', self.name, self.root)
        os.makedirs(self.root)

        logging.info("Creating config.py from template")
        config_t = Template(CONFIG_TEMPLATE, autoescape=None)
        config_filename = os.path.join(self.root, 'config.py')

        context = {
            'name': self.name,
            'source': self.source,
            'domain': self.domain,
            'build': self.build,
            'import_path': self.__module__,
            'class_name': self.__class__.__name__,
            'languages': self.languages
        }

        # jinja2's dump causes an error with py3, let's do it ourself
        with open(config_filename, 'w') as f:
            f.write(config_t.render(**context))

        # create the source directory
        logging.info("Creating source directory (%s)", self.source)
        os.makedirs(os.path.join(self.root, self.source))

    def walk_site(self):
        """Walks the site's source dir yielding assets"""

        to_ignore = self.ignore_starting_with

        for root, dirs, assets in os.walk(self.source):
            dirs[:] = [d for d in dirs if not d.startswith(to_ignore)]

            for asset in assets:
                if not asset.startswith(to_ignore):
                    yield os.path.relpath(root, self.source), asset

    def generate(self):
        """Compiles the site from source to build dir"""

        self.db = defaultdict(deque)
        for asset_dir, asset in self.walk_site():
            logging.debug('%s - %s', asset_dir, asset)


class Html5Site(Site):
    """Basic Html5 site . Create:

    - zurb foundation
    - Basic _site.html template

    """

    FOUNDATION = 'http://foundation.zurb.com/files/foundation-download-2.2.zip'

    def create(self):
        """Extra create elements"""

        super(Html5Site, self).create()
        self.get_zurb_foundation()

    def get_zurb_foundation(self):
        logging.info('Getting zurb foundation')
        try:
            archive_req = urllib.request.urlopen(self.FOUNDATION)
            archive_file = tempfile.TemporaryFile()
            archive_file.write(archive_req.read())
            logging.info('extracting zurb foundation')
            with zipfile.ZipFile(archive_file) as foundation:
                foundation.extractall(self.source)
            self.customize_foundation()
        except urllib.error.HTTPError as e:
            logging.error("Error getting zurb foundation: {0}".format(e))

    def customize_foundation(self):
        logging.info('Converting foundation to jinja templates')

        # create the templates dir
        target_dir = os.path.join(self.source, '_templates')
        os.makedirs(target_dir)

        index = os.path.join(self.source, 'index.html')
        # read index.html
        with open(index) as index_html:
            orig_content = index_html.read()

        template_content = orig_content.replace(
            'lang="en"', 'lang="{{ LANGUAGE_CODE }}" dir="{{ LANGUAGE_DIR }}"')

        template_content = re.sub(
            '<title>[^<]+<',
            '<title>{% block title %}{% endblock %} - {{ site.name }}<',
            template_content)
        template_content = re.sub(
            r'<!-- container -->.*?<!-- container -->',
            '{% block content %}{% endblock %}', template_content, re.S)

        parts = re.split(r'\s*<!-- container -->\s*', template_content)
        index_content = parts[1]

        parts[1:2] = [
            '\t<header><h1>{{ site.name }}</h1></header>',
            '{% block content %}{% endblock %}',
            '\t<footer>Generated with Statirator</footer>'
        ]
        template_content = '\n'.join(parts)

        with open(os.path.join(target_dir, 'site.html'), 'w') as site_tmpl:
            site_tmpl.write(template_content)

        parts = [
            '{% extends "site.html" %}',
            '{% block content %}',
            index_content,
            '{% endblock %}',
        ]
        with open(index, 'w') as index_html:
            index_html.write('\n'.join(parts))
